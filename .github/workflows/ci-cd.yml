name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-pages:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Pages
      uses: actions/configure-pages@v4

    - name: 准备部署文件
      run: |
        # 创建部署目录
        mkdir -p _site
        
        # 复制fluid目录下的所有文件到_site
        cp -r fluid/* _site/
        
        # 确保index.html存在
        if [ ! -f "_site/index.html" ]; then
          echo "错误: 未找到index.html文件"
          exit 1
        fi
        
        # 创建.nojekyll文件以禁用Jekyll处理
        touch _site/.nojekyll
        
        # 显示部署文件列表
        echo "部署文件列表:"
        ls -la _site/

    - name: 上传Pages构件
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

    - name: 部署到GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.event_name == 'push'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 上传Trivy扫描结果到GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 